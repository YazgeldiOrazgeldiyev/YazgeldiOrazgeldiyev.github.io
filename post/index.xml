<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Academic</title>
    <link>https://example.com/post/</link>
      <atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 10 May 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://example.com/post/</link>
    </image>
    
    <item>
      <title>Четвертая неделя</title>
      <link>https://example.com/post/3week/</link>
      <pubDate>Wed, 10 May 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/3week/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;За 4-ую неделю я успел устать от лабораторных работ&lt;/li&gt;
&lt;li&gt;Я изменил мои проекты по разным языкам программирования&lt;/li&gt;
&lt;li&gt;Практиковал работу с кодом на языке С.&lt;/li&gt;
&lt;li&gt;Запускал скрипты через командную строку&lt;/li&gt;
&lt;li&gt;Понял, что если выделять хоть пару часов на учебу, оказывается все можно успеть сделать в срок&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2023-present &lt;a href=&#34;https://github.com/YazgeldiOrazgeldiyev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yazgeldi Orazgeldiyev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/YazgeldiOrazgeldiyev/study_2022-2023_os-intro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ISO&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Языки научного программирования.</title>
      <link>https://example.com/post/spl/</link>
      <pubDate>Wed, 10 May 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/spl/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Сегодня в мире существуют сотни языков программирования — как среди них выбрать наиболее подходящий для изучения? Публикуем список из 20 наиболее популярных вариантов. Перечень составлен на основе индексов TIOBE, Google Trends и StackOverflow Trends, языки расположены в алфавитном порядке.&lt;/p&gt;
&lt;p&gt;Bash
Сценарии командной оболочки Unix, созданные Кеном Томпсоном в начале 1970-х годов, тесно связаны с языком программирования C. Bash — обновленная оболочка Unix — была впервые выпущена в конце 80-х годов и до сих пор активно разрабатывается. На Bash обычно пишутся сценарии конфигурации сервера, поэтому это хороший выбор для работы в современных облачных средах с контейнерным хранением и микросервисами. Скрипты командной оболочки используются достаточно часто, так что знание этого языка пригодится.&lt;/p&gt;
&lt;p&gt;Также стоит обратить внимание на zsh, который в настоящее время является оболочкой по умолчанию в macOS.&lt;/p&gt;
&lt;p&gt;Области применения: администрирование сервера, инструменты интерфейса командной строки, DevOps, виртуализация.&lt;/p&gt;
&lt;p&gt;COBOL
Один из старейших языков, используемых до сих пор, был создан Грейс Хоппер в конце 1950-х годов и предназначался для стандартизации разработки крупномасштабных бизнес-приложений на компьютерах. Блестящая концепция, которая до сих пор применяется в кроссплатформенных SDK. Через системы COBOL проходят невероятные 95% транзакций ATM, причем многие из этих устройств работают круглосуточно 365 дней в году. Такие поставщики устройств, как IBM, разрабатывают более мощные машины, предназначенные для COBOL, но продолжают обслуживать и обновлять существующие системы из-за затрат и рисков, связанных с их заменой. В ближайшее время COBOL никуда не уйдет. Это хороший выбор для тех, кто хочет работать с клиентами из финансовой сферы.&lt;/p&gt;
&lt;p&gt;Области применения: банковское дело / финансы, международные корпорации, правительства.&lt;/p&gt;
&lt;p&gt;C/C++
Эти языки часто занимают вершины различных рейтингов — их ценят за мощность и быстродействие. C был создан в начале 1970-х годов Деннисом Ритчи, C ++ в 1985 году разработал Бьёрн Страуструп. Сегодня два этих языка лежат в основе всего: от ОС и игр до современных научных вычислений и машинного обучения. C и C++ хорошо подходят для требовательных приложений, которым важны низкоуровневый доступ к оборудованию и производительность. Для освоения этих языков нужно время и определенные усилия.&lt;/p&gt;
&lt;p&gt;Область применения: разработка ОС / SDK, встроенные устройства, игровые движки, наука.&lt;/p&gt;
&lt;p&gt;C#
C#, выпущенный Microsoft в 2000 году, был разработан Андерсом Хейлсбергом как кроссплатформенный язык объектно-ориентированного программирования. Сейчас он часто используется для разработки бизнес-приложений, API, игр и многого другого. Благодаря широкому набору функций этот язык подходит для работы с графикой и других задач асинхронного программирования.&lt;/p&gt;
&lt;p&gt;Области применения: корпоративные приложения, разработка программного и пользовательского интерфейса, игры, графика.&lt;/p&gt;
&lt;p&gt;Dart
Современный язык, разработанный в Google для создания мобильных, десктопных, веб-и серверных приложений. Его создатель Ларс Бак также придумал JavaSript Engine V8. Dart напоминает другие современные языки объектно-ориентированного программирования — C #, TypeScript и Java — и предоставляет обширный набор функций, подходящих для определения сложных взаимодействий, асинхронных операций, анимации и других задач.&lt;/p&gt;
&lt;p&gt;Области применения: кроссплатформенные приложения, облачные сервисы / корпоративные системы, игры, графика.&lt;/p&gt;
&lt;p&gt;Fortran
Fortran, разработанный в IBM в 1950-х годах Джоном Бакусом, — это язык общего назначения, который был создан для проведения научных и инженерных работ. Он до сих пор широко используется в этих целях, в том числе для контрольного тестирования самых быстрых суперкомпьютеров в мире. Он также применялся в космических и физических исследованиях и моделировании погоды.&lt;/p&gt;
&lt;p&gt;Области применения: аэрокосмическая/оборонная промышленность, научные вычисления, численный анализ.&lt;/p&gt;
&lt;p&gt;Java
Java — это ООП-язык общего назначения, разработанный в 1990-х годах Джеймсом Гослингом в Sun (сейчас принадлежит Oracle) и предназначенный для компиляции в байт-код для запуска на виртуальной машине Java. К 2020 году к ним относятся практически все виды устройств — от телевизоров и игровых приставок до серверов, телефонов и даже кухонных приборов. Язык широко распространен в корпорациях и университетах, что сделало его популярным как среди начинающих программистов, так и среди опытных разработчиков.&lt;/p&gt;
&lt;p&gt;Области применения: корпоративные приложения, встроенные системы, веб-сервисы, игры.&lt;/p&gt;
&lt;p&gt;JavaScript
JavaScript разработал Брэндон Айх в 1990-х годах, чтобы добавлять выполнение скриптов на сайты. Сегодня это универсальный язык веб-интерфейса с мощными стандартизированными функциями, которые поддерживаются всеми основными браузерами. JavaScript соответствует стандарту EcmaScript, который обновляется каждые несколько лет с добавлением новых спецификаций языка. Кроме того, JavaScript часто используется для разработки серверных служб и API, мобильных приложений, игр и другого программного обеспечения. Это отличный выбор для изучения и дальнейшего совершенствования.&lt;/p&gt;
&lt;p&gt;Области применения: фулстэк-разработка, облачные сервисы / контейнерное хранение, игры, утилиты.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2023-present &lt;a href=&#34;https://github.com/YazgeldiOrazgeldiyev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yazgeldi Orazgeldiyev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/YazgeldiOrazgeldiyev/study_2022-2023_os-intro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ISO&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Создание презентации</title>
      <link>https://example.com/post/create-presentation/</link>
      <pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/create-presentation/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Создание презентации:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Откройте приложение PowerPoint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;В левой области выберите Создать.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Выберите один из вариантов:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Чтобы создать презентацию с нуля, выберите Пустая презентация.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Чтобы использовать подготовленный макет, выберите один из шаблонов.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Чтобы ознакомиться с советами по использованию PowerPoint, выберите Принять тур, а затем — Создать.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Добавление слайда&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;В эскизах на левой панели выберите слайд, на который вы хотите подписаться.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;На вкладке Главная в разделе Слайды выберите Создать слайд.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;В разделе Слайды выберите Макет, а затем выберите нужный макет в меню.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Добавление и форматирование текста&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Поместите курсор в текстовое поле и введите что-то.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Выделите текст, а затем выберите один или несколько параметров в разделе Шрифт на вкладке Главная , например Шрифт, Увеличить размер шрифта, Уменьшить размер шрифта, Полужирный, Курсив, Подчеркивание и т. д.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Чтобы создать маркированный или нумерованный список, выделите текст, а затем выберите элемент Маркеры или Нумерация.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Добавление рисунка, фигуры и многого другого&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Перейдите на вкладку Вставка.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Добавление рисунка&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;В разделе Изображения выберите Рисунки.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;В меню Вставка рисунка из выберите нужный источник.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Найдите нужный рисунок, выберите его и нажмите кнопку Вставить.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Чтобы добавить иллюстрации, выполните приведенные ниже действия.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;В разделе Иллюстрации выберите Фигуры, Значки, Трехмерные модели, SmartArt или Диаграмма.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;В диалоговом окне, открывшемся при щелчке одного из типов иллюстраций, выберите нужный элемент и следуйте указаниям, чтобы вставить его.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2023-present &lt;a href=&#34;https://github.com/YazgeldiOrazgeldiyev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yazgeldi Orazgeldiyev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/YazgeldiOrazgeldiyev/study_2022-2023_os-intro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ISO&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Третья неделя</title>
      <link>https://example.com/post/2week/</link>
      <pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/2week/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;За 3-ью неделю я смог выполнить все необходимые задания по Операционным системам.&lt;/li&gt;
&lt;li&gt;Я научился прикреплять ссылки на сайты своих учетных записей.&lt;/li&gt;
&lt;li&gt;За это время я работал с кодом на Питон на виртуальной машине и проверял ее правильность&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2023-present &lt;a href=&#34;https://github.com/YazgeldiOrazgeldiyev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yazgeldi Orazgeldiyev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/YazgeldiOrazgeldiyev/study_2022-2023_os-intro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ISO&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями. Git</title>
      <link>https://example.com/post/gitversion/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/gitversion/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Что такое «система контроля версий» и почему это важно? Система контроля версий — это система, записывающая изменения в файл или набор файлов в течение времени и позволяющая вернуться позже к определённой версии. Для контроля версий файлов в этой книге в качестве примера будет использоваться исходный код программного обеспечения, хотя на самом деле вы можете использовать контроль версий практически для любых типов файлов.&lt;/p&gt;
&lt;p&gt;Если вы графический или web-дизайнер и хотите сохранить каждую версию изображения или макета (скорее всего, захотите), система контроля версий (далее VCS) — как раз то, что нужно. Она позволяет вернуть файлы к состоянию, в котором они были до изменений, вернуть проект к исходному состоянию, увидеть изменения, увидеть, кто последний менял что-то и вызвал проблему, кто поставил задачу и когда и многое другое. Использование VCS также значит в целом, что, если вы сломали что-то или потеряли файлы, вы спокойно можете всё исправить. В дополнение ко всему вы получите всё это без каких-либо дополнительных усилий.&lt;/p&gt;
&lt;p&gt;Локальные системы контроля версий
Многие люди в качестве метода контроля версий применяют копирование файлов в отдельный каталог (возможно даже, каталог с отметкой по времени, если они достаточно сообразительны). Данный подход очень распространён из-за его простоты, однако он невероятно сильно подвержен появлению ошибок. Можно легко забыть в каком каталоге вы находитесь и случайно изменить не тот файл или скопировать не те файлы, которые вы хотели.&lt;/p&gt;
&lt;p&gt;Для того, чтобы решить эту проблему, программисты давным-давно разработали локальные VCS с простой базой данных, которая хранит записи о всех изменениях в файлах, осуществляя тем самым контроль ревизий.&lt;/p&gt;
&lt;p&gt;Одной из популярных VCS была система RCS, которая и сегодня распространяется со многими компьютерами. RCS хранит на диске наборы патчей (различий между файлами) в специальном формате, применяя которые она может воссоздавать состояние каждого файла в заданный момент времени.&lt;/p&gt;
&lt;p&gt;Централизованные системы контроля версий
Следующая серьёзная проблема, с которой сталкиваются люди, — это необходимость взаимодействовать с другими разработчиками. Для того, чтобы разобраться с ней, были разработаны централизованные системы контроля версий (Centralized Version Control System, далее CVCS). Такие системы, как CVS, Subversion и Perforce, используют единственный сервер, содержащий все версии файлов, и некоторое количество клиентов, которые получают файлы из этого централизованного хранилища. Применение CVCS являлось стандартом на протяжении многих лет.&lt;/p&gt;
&lt;p&gt;Централизованный контроль версий
Такой подход имеет множество преимуществ, особенно перед локальными VCS. Например, все разработчики проекта в определённой степени знают, чем занимается каждый из них. Администраторы имеют полный контроль над тем, кто и что может делать, и гораздо проще администрировать CVCS, чем оперировать локальными базами данных на каждом клиенте.&lt;/p&gt;
&lt;p&gt;Несмотря на это, данный подход тоже имеет серьёзные минусы. Самый очевидный минус — это единая точка отказа, представленная централизованным сервером. Если этот сервер выйдет из строя на час, то в течение этого времени никто не сможет использовать контроль версий для сохранения изменений, над которыми работает, а также никто не сможет обмениваться этими изменениями с другими разработчиками. Если жёсткий диск, на котором хранится центральная БД, повреждён, а своевременные бэкапы отсутствуют, вы потеряете всё — всю историю проекта, не считая единичных снимков репозитория, которые сохранились на локальных машинах разработчиков. Локальные VCS страдают от той же самой проблемы: когда вся история проекта хранится в одном месте, вы рискуете потерять всё.&lt;/p&gt;
&lt;p&gt;Распределённые системы контроля версий
Здесь в игру вступают распределённые системы контроля версий (Distributed Version Control System, далее DVCS). В DVCS (таких как Git, Mercurial, Bazaar или Darcs) клиенты не просто скачивают снимок всех файлов (состояние файлов на определённый момент времени) — они полностью копируют репозиторий. В этом случае, если один из серверов, через который разработчики обменивались данными, умрёт, любой клиентский репозиторий может быть скопирован на другой сервер для продолжения работы. Каждая копия репозитория является полным бэкапом всех данных.&lt;/p&gt;
&lt;p&gt;Распределённый контроль версий
Более того, многие DVCS могут одновременно взаимодействовать с несколькими удалёнными репозиториями, благодаря этому вы можете работать с различными группами людей, применяя различные подходы единовременно в рамках одного проекта. Это позволяет применять сразу несколько подходов в разработке, например, иерархические модели, что совершенно невозможно в централизованных системах.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2023-present &lt;a href=&#34;https://github.com/YazgeldiOrazgeldiyev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yazgeldi Orazgeldiyev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/YazgeldiOrazgeldiyev/study_2022-2023_os-intro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ISO&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Первая неделя</title>
      <link>https://example.com/post/1week/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/1week/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;За неделю я смог выполнить все необходимые задания по Операционным системам.&lt;/li&gt;
&lt;li&gt;Я научился оформлять и видоизменять страничку собственного сайта.&lt;/li&gt;
&lt;li&gt;Оформил все, что необходимо сделать и загрузил на Гит все файлы.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2023-present &lt;a href=&#34;https://github.com/YazgeldiOrazgeldiyev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yazgeldi Orazgeldiyev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/YazgeldiOrazgeldiyev/study_2022-2023_os-intro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ISO&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
